<?xml version="1.0"?>
<project name="Healthcare Fraud Prevention - Data Exchange Network Hub Services Module Assembly Build" default="jar" basedir=".">
	<property file="${basedir}/build.version" />
	<property file="build.properties" />
	<property name="javadoc.locale" value="en_US" />
	<property name="javac.encoding" value="UTF-8" />
	<property name="libdir" value="lib" />
	<property name="testlibdir" value="testlib" />
	<property name="debug" value="off" />
	<property name="verbose" value="no" />

	<!-- DIRECTORY SETUP -->
	<property name="srcdir" value="src" />
	<property name="docsdir" value="docs" />
	<property name="configdir" value="conf" />
	<property name="testlogdir" value="log" />
	<property name="test_reflib" value="test_reflib" />
	<property name="testfiles" value="test_files" />
	<property name="javadocsdir" value="${docsdir}/javadocs" />
	<property name="reports" value="${testlogdir}/reports" />
	<property name="sqldir" value="${srcdir}/sql" />

	<!-- COMPONENT PARAMETERS -->
	<property name="component" value="${component.name}" />
	<property name="package" value="${component.package}" />
	<property name="packagedir" value="${component.packagedir}" />
	<property name="distfilename" value="${component.distfilename}" />
	<property name="component_version" value="${component.version.major}.${component.version.minor}.${component.version.micro}" />
	<property name="component_path" value="${distfilename}/${component_version}" />


	<!-- DIRECTORY STRUCTURE -->
	<property name="javasrc" value="${srcdir}/java" />
	<property name="javamain" value="${javasrc}/main" />
	<property name="javatests" value="${javasrc}/tests" />

	<property name="builddir" value="build" />
	<property name="build_classdir" value="${builddir}/classes" />
	<property name="build_testclassdir" value="${builddir}/testClasses" />
	<property name="build_targetclassdir" value="${builddir}/targetclasses" />
	<property name="build_distdir" value="${builddir}/dist" />
	<property name="build_docsdir" value="${builddir}/${docsdir}" />
	<property name="build_javadocsdir" value="${builddir}/${javadocsdir}" />
	<property name="build_tcsdistdir" value="${build_distdir}/${distfilename}-${component_version}" />
	<property name="build_dist" value="${builddir}/dist" />
	<property name="build_libdir" value="${builddir}/lib" />

	<!-- COMPONENT DISTRIBUTION STRUCTURE -->
	<property name="dist_lib" value="${build_distdir}/lib/tcs" />
	<property name="dist_docs" value="${build_tcsdistdir}/${docsdir}" />
	<property name="dist_javadocs" value="${build_tcsdistdir}/${javadocsdir}" />

	<!-- NAME FOR .JAR FILES -->
	<property name="component.jar" value="${dist_lib}/${component_path}/${distfilename}.jar" />
	<property name="javadoc.jar" value="javadocs.jar" />
	<property name="component.tests.jar" value="${dist_lib}/${distfilename}_tests.jar" />
	<property name="component.dist.jar" value="${build_distdir}/${distfilename}-${component_version}.jar" />
	<property name="submission.jar" value="${distfilename}_${component_version}_submission.jar" />
	<property name="design_submission.jar" value="${distfilename}_${component_version}_design_submission.jar" />
	<property name="dev_dist.jar" value="${distfilename}_${component_version}_dev_dist.jar" />
	<property name="design_dist.jar" value="${distfilename}_${component_version}_design_dist.jar" />

	<!-- DOCUMENT PACKAGE -->
	<property name="dist_docpackage" value="${builddir}/doc_package" />
	<property name="docpackage.jar" value="${distfilename}_docs.jar" />

	<!-- classes needed to compile the production code -->
	<path id="buildlibs">
		<fileset dir="${libdir}/commons-logging-1.1.3">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/commons-collections-3.2.1">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/commons-lang-2.5">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/ehcache-2.7.2">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/jackson-2.2.0">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/hibernate-4.2.3">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/jasypt-1.9.0">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/log4j-1.2.17">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/qpid-0.22">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/spring-framework-3.2.3">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/velocity-1.7">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/mysql-connector-java-5.1.26">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/antlr-2.7.7">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/aopalliance-1.0.0">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/dom4j-1.6.1">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/javassist-3.15.0">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/jboss-logging-3.1.0">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/jboss-transaction-api_1.1_spec-1.0.1">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/slf4j-1.7.2">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/geronimo-jms_1.1_spec-1.0">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/btm-2.1.3">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${libdir}/commons-daemon-1.0.15">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- classes needed to compile the test code -->
	<path id="test.build.classpath">
		<fileset dir="${basedir}">
			<include name="${libdir}/**/*.jar" />
		</fileset>
		<path refid="buildlibs" />
		<pathelement location="${build_classdir}" />
		<pathelement location="${testfiles}" />
		<pathelement location="${configdir}" />
		<fileset dir="${testlibdir}/junit-4.10">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${testlibdir}/spring-3.2.3.RELEASE">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="compile" depends="copy-conf">
		<mkdir dir="${build_classdir}" />
		<javac srcdir="${javamain}" destdir="${build_classdir}" includes="${packagedir}/**" debug="true" verbose="${verbose}" includeAntRuntime="no" encoding="${javac.encoding}">
			<classpath refid="buildlibs" />
		</javac>
	</target>

	<target name="compile_tests" depends="compile">
		<mkdir dir="${build_testclassdir}" />
		<javac srcdir="${javatests}" destdir="${build_testclassdir}" includes="${packagedir}/**" debug="true" verbose="${verbose}" includeAntRuntime="no" encoding="${javac.encoding}">
			<classpath refid="test.build.classpath" />
		</javac>
		<copy file="${configdir}/log4j.properties" tofile="${build_testclassdir}/log4j.properties" overwrite="true" />
	</target>

	<target name="copy-conf">
		<copy file="${configdir}/template/persistence-template.xml" tofile="${configdir}/META-INF/persistence.xml" overwrite="true">
			<filterset filtersfile="build.properties">
			</filterset>
		</copy>
		<copy file="${configdir}/template/applicationContext-template.xml" tofile="${configdir}/applicationContext.xml" overwrite="true">
			<filterset filtersfile="build.properties">
			</filterset>
		</copy>
		<copy file="${configdir}/template/config-template.properties" tofile="${configdir}/config.properties" overwrite="true">
			<filterset filtersfile="build.properties">
			</filterset>
		</copy>
		<copy file="${configdir}/linux/hub.sh" tofile="${configdir}/hub.sh" overwrite="true">
			<filterset filtersfile="build.properties">
			</filterset>
		</copy>
		<copy file="${testfiles}/qpid-template.properties" tofile="${testfiles}/qpid.properties" overwrite="true">
			<filterset filtersfile="build.properties">
			</filterset>
		</copy>
	</target>

	<!-- drops the schema objects -->
	<target name="db-drop" description="Clean database" depends="clean">
		<runSQL file="${sqldir}/drop.sql" delimiter=";" />
	</target>

	<!-- creates the schema objects -->
	<target name="db-create" description="Create database tables">
		<runSQL file="${sqldir}/create.sql" delimiter=";" />
		<runSQL file="${sqldir}/triggers.sql" delimiter=";;" />
	</target>

	<target name="db-testdata" description="create test data in  database">
		<runSQL file="${sqldir}/clear.sql" delimiter=";" />
		<runSQL file="${sqldir}/data.sql" delimiter=";" />
	</target>

	<macrodef name="runSQL">
		<attribute name="file" />
		<attribute name="delimiter" />
		<sequential>
			<sql driver="${jdbc.driverClassName}" password="${jdbc.password}" url="${jdbc.url}" userid="${jdbc.username}" src="@{file}" classpathref="buildlibs" delimiter="@{delimiter}">
			</sql>
		</sequential>
	</macrodef>

	<macrodef name="test.setup">
		<sequential />
	</macrodef>

	<macrodef name="test.execute">
		<attribute name="classname" />
		<!-- standard test task -->
		<sequential>
			<mkdir dir="${testlogdir}" />
			<junit fork="true" haltonerror="false">
				<classpath location="${confdir}" />
				<classpath location="${build_testclassdir}" />
				<classpath refid="test.build.classpath" />
				<test name="@{classname}" todir="${testlogdir}">
					<formatter type="plain" usefile="true" />
					<formatter type="xml" usefile="true" />
				</test>
			</junit>
		</sequential>
	</macrodef>

	<macrodef name="test.teardown">
		<sequential />
	</macrodef>

	<target name="test1" depends="compile_tests">
		<test.setup />
		<test.execute classname="${package}.AllTests" />
		<test.teardown />
	</target>

	<target name="test2" depends="compile_tests">
		<test.setup />
		<test.execute classname="com.hfpp.network.MyAllTests" />
		<test.teardown />
	</target>

	<target name="javadoc" depends="compile">
		<mkdir dir="${dist_javadocs}" />
		<javadoc packagenames="${package}.*" sourcepath="${javamain}" classpath="${build_classdir}" classpathref="buildlibs" destdir="${dist_javadocs}" windowtitle="Topcoder Software" header="&lt;table border=0 cellpadding=0 cellspacing=2&gt;&lt;tr&gt;&lt;td&gt;&lt;font class=tcoder2&gt;&#091; &lt;/font&gt;&lt;font class=tcoder1&gt;TOP&lt;/font&gt;&lt;font class=tcoder2&gt;CODER &lt;/font&gt;&lt;font class=tcoder2&gt;&#093;&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font class=tcoder4&gt;&#153;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=tcoder3 align=center&gt;&lt;font class=tcoder3&gt;SOFTWARE&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;" footer="&lt;table border=0 cellpadding=0 cellspacing=2&gt;&lt;tr&gt;&lt;td&gt;&lt;font class=tcoder2&gt;&#091; &lt;/font&gt;&lt;font class=tcoder1&gt;TOP&lt;/font&gt;&lt;font class=tcoder2&gt;CODER &lt;/font&gt;&lt;font class=tcoder2&gt;&#093;&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font class=tcoder4&gt;&#153;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=tcoder3 align=center&gt;&lt;font class=tcoder3&gt;SOFTWARE&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;" bottom="&lt;font class=tcoder5&gt;Contact TopCoder Software at &lt;a href='http://software.topcoder.com'&gt;software.topcoder.com&lt;/a&gt;&lt;/font&gt;" stylesheetfile="${javadocsdir}/stylesheet.css" locale="${javadoc.locale}" verbose="${verbose}">
			<tag name="copyright" description="Copyright:" scope="types" />
		</javadoc>
	</target>

	<target name="clean">
		<delete dir="${builddir}" />
		<delete dir="temp" />
		<delete file="${configdir}/applicationContext.xml" />
		<delete file="${configdir}/config.properties" />
		<delete file="${configdir}/hub.sh" />
		<delete file="${configdir}/META-INF/persistence.xml" />
		<delete file="${testfiles}/qpid.properties" />
	</target>

	<pathconvert property="hfpp.classpath" pathsep=" ">
		<path refid="buildlibs" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*" to="lib/*" />
			</chainedmapper>
		</mapper>
	</pathconvert>

	<target name="jar" depends="clean,compile">
		<jar jarfile="${installer_folder}/network_hub.jar">
			<manifest>
				<attribute name="Main-Class" value="com.hfpp.network.hub.NetworkHubDaemon" />
				<attribute name="Class-Path" value=". ${hfpp.classpath}" />
			</manifest>
			<fileset dir="${build_classdir}" />
			<fileset dir="${configdir}">
				<include name="META-INF/persistence.xml" />
				<include name="META-INF/orm.xml" />
			</fileset>
		</jar>
		<copy todir="${installer_folder}/lib">
			<flattenmapper />
			<fileset dir="${libdir}" includes="*/*.jar" />
		</copy>
		<copy todir="${installer_folder}">
			<fileset dir="${configdir}" includes="config.properties" />
			<fileset dir="${configdir}" includes="ehcache.xml" />
			<fileset dir="${configdir}" includes="applicationContext.xml" />
			<fileset dir="${configdir}" includes="hub.sh" />
		</copy>
		<copy todir="${installer_folder}">
			<fileset dir="${basedir}" includes="${configdir}/velocity_templates/**" />
			<fileset dir="${basedir}" includes="${configdir}/xml_messages/**" />
			<fileset dir="${basedir}" includes="${configdir}/linux/*.sh" />
		</copy>
		<copy file="${configdir}/template/config-service-template.properties" tofile="${installer_folder}/config.properties" overwrite="true">
			<filterset filtersfile="build.properties">
			</filterset>
		</copy>
		<copy file="${configdir}/template/log4j-template.properties" tofile="${installer_folder}/log4j.properties" overwrite="true">
			<filterset filtersfile="build.properties">
			</filterset>
		</copy>
		<copy file="${configdir}/template/applicationContext-service-template.xml" tofile="${installer_folder}/applicationContext.xml" overwrite="true">
			<filterset filtersfile="build.properties">
			</filterset>
		</copy>
	</target>

	<target name="create-queue" depends="compile_tests">
		<test.setup />
		<test.execute classname="com.hfpp.network.CreateQueueSuite" />
		<test.teardown />
	</target>
</project>
